[user]
{% if git_config_user is defined %}
  name = {{ git_config_user }}
{% endif %}
{% if git_config_email is defined %}
  email = {{ git_config_email }}
{% endif %}

signingkey =  {{ git_config_ssh_sign_pub_key }}

[commit]
  gpgsign = true
[gpg "ssh"]
  allowedSignersFile = {{ ansible_user_dir }}/.ssh/allowed_signers
[gpg]
	format = ssh

# https://stackoverflow.com/a/36500841/6187576
{% for alternative in git_config_insteads %}
[url "{{ alternative.use }}"]
  insteadOf = {{ alternative.insteadOf }}
{% endfor %}

[alias]
  # borrowed from mlcdf's dotfiles
  s = status -s
  aa = add --all
  ci = commit
  co = checkout
  cr = cherry-pick
  undo = reset --soft HEAD~
  prune = fetch --prune

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  logtree = log --graph --oneline --decorate --all

  # Show verbose output about tags, branches or remotes
  # borrowed from jessfraz's dotfiles
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Get the current branch name (not so useful in itself, but used in
  # other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"
  # Push the current branch to the remote "origin", and set it to track
  # the upstream branch
  publish = "!git push -u origin $(git branch-name)"
  # Delete the remote version of the current branch
  unpublish = "!git push origin :$(git branch-name)"
  stash-rename = "!_() { rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; git stash store -m \"$2\" $rev; }; _"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[color]
  branch = auto
  diff = auto
  status = auto

[push]
  default = simple
  followTags = true

[status]
  showUntrackedFiles = all
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[core]
  autocrlf = input
  editor = vim
[pull]
  rebase = true
[init]
  defaultBranch = main
[help]
  autocorrect = 1
