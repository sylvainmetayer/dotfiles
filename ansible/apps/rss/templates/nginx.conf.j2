upstream rss {
    server 127.0.0.1:9002;
}

server {
	listen 443 ssl http2;
	server_name {{ rss_app.domain }};
	root /var/www/default/;
	index index.php;
	client_max_body_size 10M;

    location = /robots.txt  { access_log off; log_not_found off; }
    location = /favicon.ico { access_log off; log_not_found off; }
    # Deny access to .htaccess files, if Apache's document root concurs with nginx's one
    location /.ht {
        deny  all;
    }

    # Deny access to hidden dotfiles (beginning with '.')
    location /. {
        deny all;
    }

	access_log  /var/log/nginx/{{ rss_app.domain }}.access.log combined;
	error_log   /var/log/nginx/{{ rss_app.domain }}.error.log;

	location / {
        include proxy_params;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass http://rss;
	}

    # https://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    # Send cert validity information ourselves, so the user does not have to ask the CA (who
    # then knows the user visited the website).
    # Test with openssl s_client -connect www.example.com:443 -servername www.example.com -status < /dev/null | grep OCSP
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 1.1.1.1;

    # https://ssl-config.mozilla.org/#server=nginx&version=1.14.2&config=modern&openssl=1.1.1d&hsts=false&guideline=5.6
	ssl_certificate         /etc/letsencrypt/live/{{ rss_app.domain }}/fullchain.pem;
	ssl_certificate_key     /etc/letsencrypt/live/{{ rss_app.domain }}/privkey.pem;
	ssl_trusted_certificate /etc/letsencrypt/live/{{ rss_app.domain }}/chain.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # modern configuration
    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;

}

server {
	listen 80;
	server_name {{ rss_app.domain }};
	return 301 https://$host$request_uri;
}


